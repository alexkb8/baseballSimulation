package Indy;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.util.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

/**
 * Game class that includes various game modes to model baseball offense and
 * show the impact of player or manager decisions
 */
public class Game {
	int[] inningstats = Constants.ZEROS;
	private double[][] _frequencies;
	private Map<String, double[]> map;
	private double[] player;

	private int _batter;
	private int _scoring;
	private double _runsPerGame;
	private int _totalRuns;
	private int _totalRunsMan;
	private double _runsPerGameMan;
	private int _inningCount = 0;
	private Label _label;
	private Rectangle _home;
	private Rectangle _first;
	private Rectangle _second;
	private Rectangle _third;
	private Timeline _timeline;
	private Pane _root;
	private Pane _labelPane;
	private Pane _buttonPane;
	int _maxScore = 0;
	private ComboBox<String> comboBox;
	private ComboBox<String> comboBox2;
	private ComboBox<String> comboBox3;
	private ComboBox<String> comboBox4;
	private ComboBox<String> comboBox5;
	private ComboBox<String> comboBox6;
	private ComboBox<String> comboBox7;
	private ComboBox<String> comboBox8;
	private ComboBox<String> comboBox9;
	private int _sacFlyCount;
	private int _doublePlayCount;
	private int _stealAttempts;
	private int _buntAttempts;
	private double _optimalThresh;
	private double _optimalThresh1;
	private double _optimalThresh2;
	private double _optimalThresh3;
	private GridPane _grid;
	private int _inningsToRun;
	private double _thresholdSteal0;
	private double _thresholdSteal1;
	private double _thresholdSteal2;
	private double _thresholdBunt;
	private String toBunt;
	private String toSteal0;
	private String toSteal1;
	private String toSteal2;
	private TextField _numb;
	private TextField _steal0;
	private TextField _steal1;
	private TextField _steal2;
	private TextField _bunt;
	private String _buntSuccess;
	private Game _game;

	public Game(Pane cartoonPane, Pane labelPane, VBox buttonPane, GridPane grid) {

		_root = cartoonPane;
		_labelPane = labelPane;
		_buttonPane = buttonPane;
		_grid = grid;
		_buntSuccess = new String();

		// adding squares to represent the bases visually
		_home = new Rectangle(Constants.SIZE, Constants.SIZE);
		_home.setX(Constants.LENGTH);
		_home.setY(Constants.LENGTH * 3);
		_first = new Rectangle(Constants.SIZE, Constants.SIZE);

		_first.setX(Constants.LENGTH * 2);
		_first.setY(Constants.LENGTH * 2);

		_second = new Rectangle(Constants.SIZE, Constants.SIZE);

		_second.setX(Constants.LENGTH);
		_second.setY(Constants.LENGTH);

		_third = new Rectangle(Constants.SIZE, Constants.SIZE);

		_third.setX(0);
		_third.setY(Constants.LENGTH * 2);

		cartoonPane.getChildren().addAll(_home, _first, _second, _third);

		labelPane.setPrefSize(100, 80);
		_label = new Label("  ");

		labelPane.getChildren().addAll(_label);
		_label.setAlignment(Pos.CENTER);

		Button b1 = new Button("Quit");

		buttonPane.getChildren().add(b1);
		b1.setOnAction(new QuitHandler());

		cartoonPane.addEventHandler(KeyEvent.KEY_PRESSED, new KeyHandler());
		cartoonPane.setFocusTraversable(true);
		map = new HashMap<String, double[]>();// creating map and adding default players
		map.put("player1", Constants.PLAYER1);
		map.put("walks40", Constants.WALKS40);
		map.put("homeruns10", Constants.HOMERUNS10);
		map.put("catcher", Constants.CATCHER);
		map.put("1st Baseman", Constants.FIRST);
		map.put("2nd baseman", Constants.SECOND);
		map.put("3rd Baseman", Constants.THIRD);
		map.put("Shortstop", Constants.SS);
		map.put("Left Fielder", Constants.LF);
		map.put("Center Fielder", Constants.CF);
		map.put("Right Fielder", Constants.RF);
		map.put("Pitcher", Constants.PITCHER);
		map.put("MLB Average", Constants.MLBAVG);
		this.addPlayers();

	}

	// method that allows users to input new players that can be used in the rest of
	// the program
	public void addPlayers() {

		_root.getChildren().clear();
		_grid.getChildren().clear();
		_label.setText("Input players. Next you can choose to have just one player repeated or select each player");
		double[] newPlayer = new double[9];

		_grid.setPadding(new Insets(10, 10, 10, 10));
		_grid.setVgap(20);
		_grid.setHgap(5);

		TextField name = new TextField();
		name.setPromptText("Name: ");
		name.setPrefColumnCount(10);
		name.getText();
		GridPane.setConstraints(name, 1, 1);

		TextField obp = new TextField();
		obp.setPromptText("On base %: ");
		GridPane.setConstraints(obp, 1, 2);
		obp.getText();

		TextField hr = new TextField();
		hr.setPromptText("Hr %: ");
		GridPane.setConstraints(hr, 1, 3);

		TextField doubleFreq = new TextField();
		doubleFreq.setPromptText("Double %");
		GridPane.setConstraints(doubleFreq, 1, 4);

		TextField tripleFreq = new TextField();
		tripleFreq.setPromptText("Triple %");
		GridPane.setConstraints(tripleFreq, 1, 5);

		TextField walks = new TextField();
		walks.setPromptText("Walks %");
		GridPane.setConstraints(walks, 1, 6);

		TextField pa = new TextField();
		pa.setPromptText("Total Plate Appearances %");
		GridPane.setConstraints(pa, 1, 7);

		TextField second = new TextField();
		second.setPromptText("Stealing 2nd success %");
		GridPane.setConstraints(second, 1, 8);

		TextField third = new TextField();
		third.setPromptText("Stealing 3rd success %");
		GridPane.setConstraints(third, 1, 9);

		TextField num = new TextField();
		num.setPromptText("Player number");
		GridPane.setConstraints(num, 1, 10);

		Button done = new Button("Finished. Select 1");
		GridPane.setConstraints(done, 3, 10);
		done.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {

				Game.this.setUpGame();
			}

		});
		Button done2 = new Button("Finished. Select 9");
		GridPane.setConstraints(done2, 3, 11);
		done2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {

				Game.this.setUpGame9();
			}

		});

		Button submit = new Button("Submit Decimals");
		GridPane.setConstraints(submit, 2, 10);

		submit.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {

				String playerName = name.getText();

				newPlayer[0] = Double.parseDouble(obp.getText());
				newPlayer[1] = Double.parseDouble(hr.getText());
				newPlayer[2] = Double.parseDouble(doubleFreq.getText());
				newPlayer[3] = Double.parseDouble(tripleFreq.getText());
				newPlayer[4] = Double.parseDouble(walks.getText());
				newPlayer[5] = Double.parseDouble(pa.getText());
				newPlayer[6] = Double.parseDouble(second.getText());
				newPlayer[7] = Double.parseDouble(third.getText());
				newPlayer[8] = Double.parseDouble(num.getText());

				map.put(playerName, newPlayer);

				Game.this.addPlayers();
			}

		});

		Button sub2 = new Button("Submit w/ total numbers");
		GridPane.setConstraints(sub2, 2, 11);
		_grid.getChildren().addAll(name, obp, hr, doubleFreq, tripleFreq, walks, pa, second, third, num, done, done2,
				submit, sub2);
		sub2.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {

				String playerName = name.getText();
				newPlayer[5] = Double.parseDouble(pa.getText());
				newPlayer[0] = Double.parseDouble(obp.getText());
				newPlayer[1] = Double.parseDouble(hr.getText()) / newPlayer[5];
				newPlayer[2] = Double.parseDouble(doubleFreq.getText()) / newPlayer[5];
				newPlayer[3] = Double.parseDouble(tripleFreq.getText()) / newPlayer[5];
				newPlayer[4] = Double.parseDouble(walks.getText()) / newPlayer[5];
				newPlayer[6] = Double.parseDouble(second.getText());
				newPlayer[7] = Double.parseDouble(third.getText());
				newPlayer[8] = Double.parseDouble(num.getText());

				map.put(playerName, newPlayer);
				Game.this.addPlayers();
			}

		});
	}

	// Creates option menu to choose a single player
	public void setUpGame() {
		player = new double[9];

		_frequencies = new double[9][9];

		_label.setText("Choose players");
		_root.getChildren().clear();
		_grid.getChildren().clear();
		_labelPane.getChildren().clear();

		Button done = new Button("Finished");
		GridPane.setConstraints(done, 3, 9);
		done.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {

				if (comboBox.getValue() == null) {
					player = Constants.CF;
				} else {
					String key = comboBox.getValue();
					player = map.get(key);
				}

				for (int j = 0; j < 9; j++) {
					for (int i = 0; i < 9; i++) {

						_frequencies[j][i] = player[i];

					}
				}

				Game.this.showGame();
			}

		});

		comboBox = new ComboBox<String>();
		GridPane.setConstraints(comboBox, 1, 0);
		comboBox.setPromptText("Player 1: ");
		for (String keys : map.keySet()) {
			comboBox.getItems().add(keys);
		}
		_grid.getChildren().addAll(comboBox, done);

	}

//creates option menus to select a team of 9 players
	public void setUpGame9() {
		player = new double[9];

		_frequencies = new double[9][9];
		_label.setText("Choose player lineup");

		_root.getChildren().clear();
		_grid.getChildren().clear();

		Button done = new Button("Finished");
		GridPane.setConstraints(done, 3, 9);
		done.setOnAction(new EventHandler<ActionEvent>() {
			@Override
			public void handle(ActionEvent event) {
				if (comboBox.getValue() == null) {
					player = Constants.CF;
				} else {
					String key = comboBox.getValue();
					player = map.get(key);
				}
				for (int j = 0; j < 9; j++) {
					for (int i = 0; i < 9; i++) {

						_frequencies[j][i] = player[i];

					}
				}
				if (comboBox.getValue() == null) {
					player = Constants.SECOND;
				} else {
					String key2 = comboBox2.getValue();
					player = map.get(key2);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[1][i] = player[i];

				}
				if (comboBox.getValue() == null) {
					player = Constants.SS;
				} else {
					String key3 = comboBox3.getValue();
					player = map.get(key3);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[2][i] = player[i];

				}

				if (comboBox.getValue() == null) {
					player = Constants.FIRST;
				} else {
					String key4 = comboBox4.getValue();
					player = map.get(key4);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[3][i] = player[i];

				}

				if (comboBox.getValue() == null) {
					player = Constants.THIRD;
				} else {
					String key5 = comboBox5.getValue();
					player = map.get(key5);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[4][i] = player[i];

				}

				if (comboBox.getValue() == null) {
					player = Constants.CATCHER;
				} else {
					String key6 = comboBox6.getValue();
					player = map.get(key6);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[5][i] = player[i];

				}

				if (comboBox.getValue() == null) {
					player = Constants.RF;
				} else {
					String key7 = comboBox7.getValue();
					player = map.get(key7);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[6][i] = player[i];

				}
				if (comboBox.getValue() == null) {
					player = Constants.LF;
				} else {
					String key8 = comboBox8.getValue();
					player = map.get(key8);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[7][i] = player[i];

				}
				if (comboBox.getValue() == null) {
					player = Constants.PITCHER;
				} else {
					String key8 = comboBox8.getValue();
					player = map.get(key8);
				}
				for (int i = 0; i < 9; i++) {

					_frequencies[8][i] = player[i];

				}

				Game.this.showGame();

			}

		});
		_label.setText("Default lineup is MLB AVG: CF, 2B, SS, 1B, 3B, C, RF, LF, P");
		comboBox = new ComboBox<String>();
		comboBox2 = new ComboBox<String>();
		comboBox3 = new ComboBox<String>();
		comboBox4 = new ComboBox<String>();
		comboBox5 = new ComboBox<String>();
		comboBox6 = new ComboBox<String>();
		comboBox7 = new ComboBox<String>();
		comboBox8 = new ComboBox<String>();
		comboBox9 = new ComboBox<String>();

		GridPane.setConstraints(comboBox, 1, 0);
		GridPane.setConstraints(comboBox2, 1, 1);
		GridPane.setConstraints(comboBox3, 1, 2);
		GridPane.setConstraints(comboBox4, 1, 3);
		GridPane.setConstraints(comboBox5, 1, 4);
		GridPane.setConstraints(comboBox6, 1, 5);
		GridPane.setConstraints(comboBox7, 1, 6);
		GridPane.setConstraints(comboBox8, 1, 7);
		GridPane.setConstraints(comboBox9, 1, 8);

		comboBox.setPromptText("Batter 1: ");
		comboBox2.setPromptText("Batter 2: ");
		comboBox3.setPromptText("Batter 3: ");
		comboBox4.setPromptText("Batter 4: ");
		comboBox5.setPromptText("Batter 5: ");
		comboBox6.setPromptText("Batter 6: ");
		comboBox7.setPromptText("Batter 7: ");
		comboBox8.setPromptText("Batter 8: ");
		comboBox9.setPromptText("Batter 9: ");

		for (String keys : map.keySet()) {
			comboBox.getItems().add(keys);
			comboBox2.getItems().add(keys);
			comboBox3.getItems().add(keys);
			comboBox4.getItems().add(keys);
			comboBox5.getItems().add(keys);
			comboBox6.getItems().add(keys);
			comboBox7.getItems().add(keys);
			comboBox8.getItems().add(keys);
			comboBox9.getItems().add(keys);
		}

		_grid.getChildren().addAll(done, comboBox, comboBox2, comboBox3, comboBox4, comboBox5, comboBox6, comboBox7,
				comboBox8, comboBox9);

	}

//shows the baseball diamond and shows options for different game modes
	private void showGame() {
		_root.getChildren().clear();
		_grid.getChildren().clear();
		_labelPane.getChildren().clear();
		_buttonPane.getChildren().clear();
		_root.getChildren().addAll(_home, _first, _second, _third);
		_home.setFill(Color.BLACK);
		_first.setFill(Color.BLACK);
		_second.setFill(Color.BLACK);
		_third.setFill(Color.BLACK);

		_labelPane.setPrefSize(100, 80);
		inningstats[0] = 0;
		inningstats[1] = 0;
		inningstats[2] = 0;
		inningstats[3] = 0;
		inningstats[4] = 0;
		_label.setText("Chose from options below");
		_labelPane.getChildren().addAll(_label);

		_root.addEventHandler(KeyEvent.KEY_PRESSED, new KeyHandler());
		_root.setFocusTraversable(true);

		Button b1 = new Button("Quit");
		Button b2 = new Button("Input new players");
		Button b3 = new Button("Lineup Optimization");
		Button b4 = new Button("Visual Game");
		Button b5 = new Button("Run this many games");
		Button b6 = new Button("Stealing/Bunting manager");
		_buttonPane.getChildren().addAll(b1, b2, b3, b4, b5, b6);
		b1.setOnAction(new QuitHandler());
		b3.setOnAction(new LineupHandler());
		b2.setOnAction(new StartHandler());
		b4.setOnAction(new VisualHandler());
		b5.setOnAction(new RunHandler());
		b6.setOnAction(new ManagerHandler());

	}

	// method to run games with no added features
	public void runGames(int games) {
		_grid.getChildren().clear();
		_root.setFocusTraversable(true);
		inningstats[3] = 0;
		_doublePlayCount = 0;
		_sacFlyCount = 0;
		int gameCount = 0;
		while (gameCount < games) { // runs this many 9 inning games

			while (_inningCount < 9) { // runs this many innings

				while (inningstats[4] < 3) { // while outs less than 3

					this.atBat();
					_batter++;
					if (_batter == 9) {
						_batter = 0;
					}

				}

				_inningCount++;
				inningstats[0] = 0;
				inningstats[1] = 0;
				inningstats[2] = 0;
				inningstats[4] = 0; // empties bases and sets outs back to zero at end of inning

			}

			_inningCount = 0;
			_batter = 0;
			gameCount++;
		}
		_totalRuns = inningstats[3];
		double gms = games;
		_runsPerGame = (_totalRuns / gms);
		System.out.println("Total Runs: " + _totalRuns);
		System.out.println("Double plays: " + _doublePlayCount);
		System.out.println("Sac Flies: " + _sacFlyCount);
	}

//creates a user interface for using the different Manager/decisions modes 
	private void setupManager() {
		_root.getChildren().clear();
		_grid.getChildren().clear();
		_label.setText("Input a whole number of games and numbers between 0 - 1.0 for rest, or use the other buttons");
		Button b7 = new Button("Done. Run this many innings");
		b7.setOnAction(new ManagerPlay());
		GridPane.setConstraints(b7, 1, 5);

		Button b8 = new Button("Steal threshold optimizer");
		b8.setOnAction(new ThresholdPlay());
		GridPane.setConstraints(b8, 1, 6);

		Button b9 = new Button("All or none steals and bunts");
		b9.setOnAction(new StealOrNotPlay());
		GridPane.setConstraints(b9, 1, 7);

		_numb = new TextField();
		_numb.setPromptText("Number of games: ");
		GridPane.setConstraints(_numb, 0, 1);

		_steal0 = new TextField();
		_steal0.setPromptText("Stealing threshold w/ 0 outs ");
		GridPane.setConstraints(_steal0, 0, 2);

		_steal1 = new TextField();
		_steal1.setPromptText("Stealing threshold w/ 1 out");
		GridPane.setConstraints(_steal1, 0, 3);

		_steal2 = new TextField();
		_steal2.setPromptText("Stealing threshold w/ 2 outs");
		GridPane.setConstraints(_steal2, 0, 4);

		_bunt = new TextField();
		_bunt.setPromptText("Bunt if OBP below this");
		GridPane.setConstraints(_bunt, 0, 5);

		_grid.getChildren().addAll(_numb, _steal0, _steal1, _steal2, _bunt, b7, b8, b9);
	}

	// sets up permutations mode
	public void setupPermutations() {

		_grid.getChildren().clear();
		_root.getChildren().clear();
		_labelPane.getChildren().clear();
		_labelPane.setPrefSize(66, 44);

		_maxScore = 0;
		this.permutations();
	}

	// runs through all possible orderings/lineups of 9 players and finds which one
	// scores the most
	public void permutations() {

		double[][] bestTeam = null;
		System.out.println("start. Please wait");

		int[] indexes = new int[8];
		for (int i = 0; i < 8; i++) {
			indexes[i] = 0;
		}

		runGames(9);
		if (_totalRuns > _maxScore) {
			_maxScore = _totalRuns;
			bestTeam = _frequencies;
		}
		int i = 0;
		while (i < 8) {
			if (indexes[i] < i) {
				swap(_frequencies, i % 2 == 0 ? 0 : indexes[i], i);
				runGames(9);
				if (_totalRuns > _maxScore) {
					_maxScore = _totalRuns;
					bestTeam = _frequencies;
				}
				indexes[i]++;
				i = 0;
			} else {
				indexes[i] = 0;
				i++;
			}
		}

		System.out.println("Max score: " + _maxScore);
		this.teamOrder(bestTeam);

	}

//swaps elements for permuations
	private void swap(double[][] input, int a, int b) {
		double[] tmp = input[a];
		input[a] = input[b];
		input[b] = tmp;
	}

//method to present Strings
	private String convertToList(double[] input) {
		String nums = new String();

		for (int i = 0; i < 9; i++) {
			nums = nums + input[i] + ", ";

		}
		return nums;
	}

	// method that gets order from 2 dimensional array
	private void teamOrder(double[][] input) {
		double[] order = new double[9];

		for (int j = 0; j < 9; j++) {

			order[j] = _frequencies[j][8];

		}

		_labelPane.getChildren().addAll(_label);
		_label.setAlignment(Pos.CENTER);
		_label.setText("Max Score: " + _maxScore + " Optimal lineup by player #:  " + this.convertToList(order));
		System.out.println(order);
	}

	// method to run games with bunting and base stealing decisions based on
	// inputted values
	public void runManagerGames(int games, double bunt, double stl0, double stl1, double stl2) {
		_grid.getChildren().clear();
		_root.setFocusTraversable(true);
		inningstats[3] = 0;
		_doublePlayCount = 0;
		_sacFlyCount = 0;
		_stealAttempts = 0;

		_buntAttempts = 0;

		int gameCount = 0;
		while (gameCount < games) { // runs this many 9 inning games

			while (_inningCount < 9) { // runs this many innings

				while (inningstats[4] < 3) { // while outs less than 3
					int onFirst = 0;
					if (_batter == 0) {
						onFirst = 8;
					} else {
						onFirst = _batter - 1; // not 100% accurate if higher lower threshold at higher outs
					}

					if (inningstats[4] == 0) {
						if (_frequencies[onFirst][6] > stl0) { // batter-1 makes it the last batter who just reached
																// first
							if (inningstats[0] == 1 && inningstats[1] == 0) {
								Game.this.stealSecond();
								_stealAttempts++;
							}
						}
					} else if (inningstats[4] == 1) {
						if (_frequencies[onFirst][6] > stl1) { // batter-1 makes it the last batter who just reached
																// first
							if (inningstats[0] == 1 && inningstats[1] == 0) {
								Game.this.stealSecond();
								_stealAttempts++;
							}
						}
					} else {
						if (_frequencies[onFirst][6] > stl2) { // batter-1 makes it the last batter who just reached
																// first
							if (inningstats[0] == 1 && inningstats[1] == 0) {
								Game.this.stealSecond();
								_stealAttempts++;
							}
						}
					}

					if (_frequencies[_batter][0] < bunt && inningstats[0] == 1 && inningstats[1] == 0
							&& inningstats[4] < 2) {

						Game.this.bunt();
						_buntAttempts++;

					} else {
						this.atBat();
					}

					_batter++;
					if (_batter == 9) {
						_batter = 0;
					}

				}

				_inningCount++;
				inningstats[0] = 0;
				inningstats[1] = 0;
				inningstats[2] = 0;
				inningstats[4] = 0; // empties bases and sets outs back to zero at end of inning

			}

			_inningCount = 0;
			_batter = 0;
			gameCount++;
		}
		_totalRunsMan = inningstats[3];
		double gms = games;
		_runsPerGameMan = (_totalRunsMan / gms);
	}

	// compares runs scored with stealing and bunting vs not stealing and bunting to
	// find best option
	public void stealOrNot() {

		double maxRunsNone = 0;
		toBunt = new String("Don't bunt, ");
		toSteal0 = new String("Don't steal w/ 0 outs, ");
		toSteal1 = new String("Don't steal w/ 1 outs, ");
		toSteal2 = new String("Don't steal w/ 2 outs");

		this.runManagerGames(90000, 0, 1, 1, 1);
		if (_totalRunsMan > maxRunsNone) {
			maxRunsNone = _totalRunsMan;
		}
		this.runManagerGames(90000, 1, 1, 1, 1);
		if (_totalRunsMan > maxRunsNone) {
			toBunt = "Bunt, ";
		}

		this.runManagerGames(90000, 0, 0, 1, 1);
		if (_totalRunsMan > maxRunsNone) {
			toSteal0 = "Steal w/ 0 outs, ";
		}

		this.runManagerGames(90000, 0, 1, 0, 1);
		if (_totalRunsMan > maxRunsNone) {
			toSteal1 = "Steal w/ 1 outs, ";
		}
		this.runManagerGames(90000, 0, 1, 1, 0);
		if (_totalRunsMan > maxRunsNone) {
			toSteal2 = "Steal w/ 2 outs ";
		}
		_label.setText("Advice: " + toBunt + toSteal0 + toSteal1 + toSteal2);
	}

	// runs games with different thresholds for whether or not to steal or bunt and
	// finds the highest score
	public void stealOptimizer() {
		double maxRuns = 0;
		double maxRuns1 = 0;
		double maxRuns2 = 0;
		double maxRuns3 = 0;

		for (int i = 0; i < 100; i++) {
			double thresh = .01 * i;
			this.runManagerGames(9000, 0, thresh, 1, 1);
			if (_totalRunsMan > maxRuns) {
				maxRuns = _totalRunsMan;
				_optimalThresh = thresh;
			}
		}

		for (int i = 0; i < 100; i++) {
			double thresh1 = .01 * i;
			_totalRunsMan = 0;
			this.runManagerGames(9000, 0, 1, thresh1, 1);
			if (_totalRunsMan > maxRuns1) {
				maxRuns1 = _totalRunsMan;
				_optimalThresh1 = thresh1;
			}
		}
		for (int i = 0; i < 100; i++) {
			double thresh2 = .01 * i;
			_totalRunsMan = 0;
			this.runManagerGames(9000, 0, 1, 1, thresh2);
			if (_totalRunsMan > maxRuns2) {
				maxRuns2 = _totalRunsMan;
				_optimalThresh2 = thresh2;
			}
		}

		for (int i = 0; i < 100; i++) {
			double thresh3 = .01 * i;
			_totalRunsMan = 0;
			this.runManagerGames(9000, thresh3, 1, 1, 1);
			if (_totalRunsMan > maxRuns3) {
				maxRuns3 = _totalRunsMan;
				_optimalThresh3 = thresh3;
			}
		}

		_root.getChildren().clear();
		_grid.getChildren().clear();
		_label.setText("Optimal steal threshold 0 outs: " + _optimalThresh + " 1 out: " + _optimalThresh1 + " 2 outs: "
				+ _optimalThresh2 + " Bunt obp threshold: " + _optimalThresh3); // these are not exact optimal values
	}

	// method that models a single at bat event
	public void atBat() {

		_home.setFill(Color.BLACK);
		_scoring = 0;
		double rand = Math.random();
		if (rand > (1 - Constants.DOUBLEPLAY) && inningstats[0] == 1) { // double play
			this.doublePlay();
		} else if (rand > 1 - Constants.DOUBLEPLAY - Constants.SACRIFICE) {
			this.sacFly();
		} else if (rand > _frequencies[_batter][0]) { // Out
			inningstats[4]++; // adds 1 out
		} else if (rand > _frequencies[_batter][0] - _frequencies[_batter][1]) {
			this.homerun();
		} else if (rand > _frequencies[_batter][0] - _frequencies[_batter][1] - _frequencies[_batter][2]) {
			this.hitDouble();
		} else if (rand > _frequencies[_batter][0] - _frequencies[_batter][1] - _frequencies[_batter][2]
				- _frequencies[_batter][3]) {
			this.triple();
		} else if (rand > _frequencies[_batter][0] - _frequencies[_batter][1] - _frequencies[_batter][2]
				- _frequencies[_batter][3] - _frequencies[_batter][4]) {
			this.walk();
		} else {
			this.single();
		}

	}

	// Sacrifice fly method
	public void sacFly() {
		if (inningstats[2] == 1 && inningstats[4] < 2) {
			inningstats[2] = 0;
			inningstats[3]++;
			_sacFlyCount++;
			if (inningstats[1] == 1) { // player from second also advances
				inningstats[1] = 0;
				inningstats[2] = 1;
			}
		}
		inningstats[4]++;

	}

	public void doublePlay() {
		inningstats[4] = inningstats[4] + 2; // adds 2 outs
		inningstats[0] = 0; // runner from first gets out too
		_doublePlayCount++;
	}

	public void homerun() {
		for (int i = 0; i < 2; i++) {

			_scoring = inningstats[i];
		}

		inningstats[3] = inningstats[3] + _scoring + 1; // adds runs
		_home.setFill(Color.GREEN);
		for (int i = 0; i < 2; i++) { // clears bases
			inningstats[i] = 0;
		}
	}

	// method for hitting a double, uses random numbers to determine if a runner on
	// first advances to third or scores
	public void hitDouble() {

		for (int i = 1; i < 2; i++) { // on 2nd or 3rd

			_scoring = inningstats[i];
		}
		inningstats[2] = 0; // player leaves third base to score

		if (inningstats[0] == 1) { // if runner on first
			double runRand = Math.random();
			if (runRand < .4) {
				_scoring++;
			} else if (runRand < .43) {
				inningstats[4]++; // thrown out at home plate
			} else {
				inningstats[2] = 1; // moves from 1st to third
			}
		}

		inningstats[3] = inningstats[3] + _scoring; // adds runs
		if (_scoring > 0) {
			_home.setFill(Color.GREEN);
		}

		inningstats[0] = 0; // first base empty now
		inningstats[1] = 1; // puts player on 2nd

	}

	public void triple() {

		for (int i = 0; i < 2; i++) {

			_scoring = _scoring + inningstats[i];
		}

		inningstats[3] = inningstats[3] + _scoring; // adds runs

		for (int i = 0; i < 2; i++) { // clears bases
			inningstats[i] = 0;
		}
		if (_scoring > 0) {
			_home.setFill(Color.GREEN);
		}

		inningstats[2] = 1;

	}

	public void walk() {

		if (inningstats[0] == 1 && inningstats[1] == 1 && inningstats[2] == 1) { // if bases all full then run scored
			_scoring = 1;
		}

		if (inningstats[0] == 1) { // if runner on first:

			if (inningstats[1] == 1) { // if also runner on second, moves to 3rd

				inningstats[2] = 1;
			} else { // if second empty, advances to 2nd
				inningstats[1] = 1;
			}

		}
		if (_scoring > 0) {
			_home.setFill(Color.GREEN);
		}

		inningstats[3] = inningstats[3] + _scoring; // adds runs
		inningstats[0] = 1; // puts player on 1st

	}

	// method for hitting a single, uses random number to determine if runner on
	// second goes home
	public void single() {

		if (inningstats[2] == 1) { // if runner on third, scores
			inningstats[2] = 0; // leaves 3rd base to score
			_scoring = 1;
		}
		if (inningstats[1] == 1) {
			double runRand = Math.random();
			if (runRand < .595) { // gives 59.5% chance they score from 2nd base
				_scoring++;
				if (inningstats[0] == 1) {
					inningstats[2] = 1; // first goes to third
				}
			} else if (runRand < .65) {
				inningstats[4]++; // thrown out at home plate
			} else {
				inningstats[2] = 1; // rest of time advance to third
			}
			inningstats[1] = 0;
		}
		if (inningstats[0] == 1) {
			inningstats[1] = 1;
		}
		if (_scoring > 0) {
			_home.setFill(Color.GREEN);
		}

		inningstats[3] = inningstats[3] + _scoring; // adds runs
		inningstats[0] = 1; // puts player on 1st

	}

	public void stealSecond() {
		double stealRand = Math.random();
		if (stealRand < _frequencies[_batter][6]) { // successful steal
			inningstats[1] = 1;
			_second.setFill(Color.YELLOW);
			_label.setText("Steal Sucessful. " + "runs : " + inningstats[3] + " inning: " + (_inningCount + 1)
					+ " outs:" + inningstats[4]);
		} else {
			inningstats[4]++; // out
			_label.setText("Steal Failed. " + "runs : " + inningstats[3] + " inning: " + (_inningCount + 1) + " outs:"
					+ inningstats[4]);
		}
		inningstats[0] = 0;
		_first.setFill(Color.BLACK);

	}

	public void stealThird() {
		double stealRand = Math.random();
		if (stealRand < _frequencies[_batter][7]) { // successful steal
			inningstats[2] = 1;
			_third.setFill(Color.YELLOW);
			_label.setText("Steal Sucessful. " + "runs : " + inningstats[3] + " inning: " + (_inningCount + 1)
					+ " outs:" + inningstats[4]);
		} else {
			inningstats[4]++; // out
			_label.setText("Steal Failed. " + "runs : " + inningstats[3] + " inning: " + (_inningCount + 1) + " outs:"
					+ inningstats[4]);
		}
		inningstats[1] = 0;
		_second.setFill(Color.BLACK);

	}

	// models bunt as player on first successfully advancing or not based on a
	// random number
	public void bunt() {
		double buntRand = Math.random();
		if (buntRand < Constants.BUNT) {
			inningstats[1] = 1; // player advances
			inningstats[0] = 0;
			_first.setFill(Color.BLACK);
			_second.setFill(Color.YELLOW);
			_buntSuccess = "Successful bunt, player advances";
		} else {
			_buntSuccess = "Bunt Failed, thrown out at second";
		}
		inningstats[4]++;
	}

	//
	private class QuitHandler implements EventHandler<ActionEvent> {
		public QuitHandler() {
		}

		public void handle(ActionEvent event) {
			System.exit(0);
		}
	}

	private class LineupHandler implements EventHandler<ActionEvent> {
		public LineupHandler() {
		}

		public void handle(ActionEvent event) {
			Game.this.setupPermutations();

		}
	}

	private class StartHandler implements EventHandler<ActionEvent> {
		public StartHandler() {
		}

		public void handle(ActionEvent event) {
			Game.this.addPlayers();

		}
	}

	private class VisualHandler implements EventHandler<ActionEvent> {
		public VisualHandler() {
		}

		public void handle(ActionEvent event) {
			Game.this.showGame();
			Game.this.setupTimeLine();

		}
	}

	private class ManagerHandler implements EventHandler<ActionEvent> {
		public ManagerHandler() {
		}

		public void handle(ActionEvent event) {

//			_manager = new Manager(_game);
			Game.this.setupManager();

		}
	}

	private class ManagerPlay implements EventHandler<ActionEvent> {
		public ManagerPlay() {
		}

		public void handle(ActionEvent event) {

			_inningsToRun = (int) (Double.parseDouble(_numb.getText()));

			_thresholdSteal0 = Double.parseDouble(_steal0.getText());
			_thresholdSteal1 = Double.parseDouble(_steal1.getText());
			_thresholdSteal2 = Double.parseDouble(_steal2.getText());
			_thresholdBunt = Double.parseDouble(_bunt.getText());
			inningstats[3] = 0;
			Game.this.runManagerGames(_inningsToRun, _thresholdBunt, _thresholdSteal0, _thresholdSteal1,
					_thresholdSteal2);

			Game.this.runGames(_inningsToRun);

			_labelPane.getChildren().clear();
			double manVsNone = _runsPerGameMan - _runsPerGame;

			Label label = new Label("Runs/game: " + _runsPerGameMan + " Stl 2nd attempts: " + _stealAttempts
					+ " Bunts: " + _buntAttempts);
			Label label2 = new Label("If no stls/bunts, runs/game: " + _runsPerGame);
			Label label3 = new Label("Good choices, Your thresholds vs no steals or bunts runs/g: " + manVsNone);
			if (manVsNone < 0) {
				label3.setText("Bad choices, runs/game less than default of no steals or bunts. Dif: " + manVsNone);
			}

			GridPane.setConstraints(label, 0, 2);
			GridPane.setConstraints(label2, 0, 3);
			GridPane.setConstraints(label3, 0, 4);
			_grid.getChildren().addAll(label, label2, label3);
		}
	}

	private class ThresholdPlay implements EventHandler<ActionEvent> {
		public ThresholdPlay() {
		}

		public void handle(ActionEvent event) {
			Game.this.stealOptimizer();

		}
	}

	private class StealOrNotPlay implements EventHandler<ActionEvent> {
		public StealOrNotPlay() {
		}

		public void handle(ActionEvent event) {
			Game.this.stealOrNot();

		}
	}

	private class RunHandler implements EventHandler<ActionEvent> {
		public RunHandler() {
		}

		public void handle(ActionEvent event) {

			TextField numb = new TextField();
			numb.setPromptText("Number of games: ");
			GridPane.setConstraints(numb, 1, 1);

			Button start = new Button("Start");
			GridPane.setConstraints(start, 2, 1);

			_grid.getChildren().addAll(numb, start);

			start.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent event) {
					inningstats[3] = 0;
					_inningsToRun = (int) (Double.parseDouble(numb.getText()));
					Game.this.runGames(_inningsToRun);
					_label.setText("Total Runs scored: " + _totalRuns + "  runs per game: " + _runsPerGame);
				}

			});

		}
	}

	Boolean _isPaused = false;

//Handles user input to control visual game, including pausing, bunting, and stealing
	private class KeyHandler implements EventHandler<KeyEvent> {
		@Override
		public void handle(KeyEvent e) {
			KeyCode keyPressed = e.getCode();
			switch (keyPressed) {

			case UP:
				if (inningstats[0] == 1 && inningstats[1] == 0) {
					Game.this.stealSecond();
				}
				break;
			case LEFT:
				if (inningstats[1] == 1 && inningstats[2] == 0) {
					Game.this.stealThird();
				}
				break;
			case B:
				if (inningstats[0] == 1 && inningstats[1] == 0 && inningstats[4] < 2) {
					Game.this.bunt();
					_label.setText(_buntSuccess);
				}
				break;
			case P:
				if (_isPaused) {
					_timeline.play();
					_isPaused = false;
					_label.setText("runs : " + inningstats[3] + " inning: " + (_inningCount + 1) + " outs:"
							+ inningstats[4] + " Now at bat: #" + _frequencies[_batter][8] + " lineup position:"
							+ (_batter + 1));
				} else {
					_timeline.stop();
					_isPaused = true;
					_label.setText("Paused. " + "runs : " + inningstats[3] + " inning: " + (_inningCount + 1) + " outs:"
							+ inningstats[4] + " Now at bat: #" + _frequencies[_batter][8] + " lineup position:"
							+ (_batter + 1));
				}
				break;
			default:
				break;
			}
			e.consume();
		}
	}

	// method to setup the timeline
	public void setupTimeLine() {
		KeyFrame kf = new KeyFrame(Duration.seconds(1), new TimeHandler());
		_timeline = new Timeline(kf);
		_timeline.setCycleCount(Animation.INDEFINITE);
		_timeline.play();
	}

	// TimeHandler that runs game in visual mode
	private class TimeHandler implements EventHandler<ActionEvent> {
		public void handle(ActionEvent event) {

			if (_inningCount < 9) { // runs this many innings

				if (inningstats[4] < 3) { // while outs less than 3

					atBat();
					_batter++;
					if (_batter == 9) {
						_batter = 0;
					}

				} else if (inningstats[4] >= 3) {

					_inningCount++;
					inningstats[0] = 0;
					inningstats[1] = 0;
					inningstats[2] = 0;
					inningstats[4] = 0; // empties bases and sets outs back to zero at end of inning

				}

				if (inningstats[0] == 1) {
					_first.setFill(Color.YELLOW);
				} else {
					_first.setFill(Color.BLACK);

				}
				if (inningstats[1] == 1) {
					_second.setFill(Color.YELLOW);
				} else {
					_second.setFill(Color.BLACK);

				}
				if (inningstats[2] == 1) {
					_third.setFill(Color.YELLOW);
				} else {
					_third.setFill(Color.BLACK);
				}

				_label.setText("runs : " + inningstats[3] + " inning: " + (_inningCount + 1) + " outs:" + inningstats[4]
						+ " Now at bat: #" + _frequencies[_batter][8] + " lineup position:" + (_batter + 1));
			} else if (_inningCount == 9) {
				_label.setText("Game Over. Runs scored: " + inningstats[3]);
				_timeline.stop();
			}

		}
	}

}
